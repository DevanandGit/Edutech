# Generated by Django 4.1.7 on 2023-07-28 11:09

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Access_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type', models.CharField(max_length=5, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FieldOfStudy',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('field_of_study', models.CharField(max_length=200, unique=True)),
                ('course_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('price', models.DecimalField(decimal_places=2, default=100, max_digits=6)),
                ('Course_description', models.TextField(default='course Description')),
                ('user_benefit', models.TextField(default='user benefits', help_text="Enter what the user's benefit with the course.")),
                ('cover_image', models.ImageField(blank=True, default=None, null=True, upload_to='images/')),
                ('only_paid', models.BooleanField(default=True)),
                ('slug_studyfield', models.SlugField(blank=True, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Make Sure to Set Active-state while creating.')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Modules',
            fields=[
                ('modules_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('module_name', models.CharField(max_length=400)),
                ('slug_modules', models.SlugField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Make Sure to Set Active-state while creating.')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SliderImage',
            fields=[
                ('images_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('images', models.ImageField(blank=True, null=True, upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='videosNested',
            fields=[
                ('video_unique_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('video_id', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=600)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('slug_videos', models.SlugField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Make Sure to Set Active-state while creating.')),
                ('access_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.access_type')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='user.modules')),
            ],
        ),
        migrations.CreateModel(
            name='Subjects',
            fields=[
                ('subject_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('subject_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('subjects', models.CharField(max_length=200)),
                ('slug_subjects', models.SlugField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Make Sure to Set Active-state while creating.')),
                ('direct_slug', models.SlugField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('field_of_study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='user.fieldofstudy')),
            ],
        ),
        migrations.CreateModel(
            name='PopularCourses',
            fields=[
                ('popular_course_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('course', models.ManyToManyField(blank=True, to='user.fieldofstudy')),
            ],
        ),
        migrations.CreateModel(
            name='NotesNested',
            fields=[
                ('notes_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=600)),
                ('pdf_link', models.URLField(max_length=250)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('slug_notes', models.SlugField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Make Sure to Set Active-state while creating.')),
                ('access_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.access_type')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='user.modules')),
            ],
        ),
        migrations.AddField(
            model_name='modules',
            name='subjects',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='user.subjects'),
        ),
        migrations.CreateModel(
            name='RegularUserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100)),
                ('username', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Phone number must be 10 digits.', regex='^\\d{10}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
